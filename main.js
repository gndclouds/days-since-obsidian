/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DATE_FORMATS = {
  "YYYY-MM-DD": /\b\d{4}-\d{2}-\d{2}\b/g,
  "DD-MM-YYYY": /\b\d{2}-\d{2}-\d{4}\b/g
  // Add other formats as needed
};
var DEFAULT_SETTINGS = {
  selectedDateFormat: "YYYY-MM-DD"
  // Default format
};
var MyPlugin = class extends import_obsidian.Plugin {
  handleHover(event) {
    const hoveredElement = event.target;
    const hoveredText = hoveredElement.textContent || "";
    const selectedRegex = DATE_FORMATS[this.settings.selectedDateFormat];
    const match = hoveredText.match(selectedRegex);
    if (match && match.length > 0) {
      const hoveredDate = new Date(match[0]);
      const today = new Date();
      const timeDifference = today.getTime() - hoveredDate.getTime();
      const daysSince = Math.floor(timeDifference / (1e3 * 3600 * 24));
      this.tooltip.textContent = `${daysSince} days since`;
      this.tooltip.style.left = `${event.clientX}px`;
      this.tooltip.style.top = `${event.clientY + 20}px`;
      this.tooltip.style.display = "block";
    }
  }
  async onload() {
    await this.loadSettings();
    console.log("Selected date format:", this.settings.selectedDateFormat);
    this.registerDomEvent(document, "mouseover", (event) => {
      this.handleHover(event);
    });
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.addSettingTab(new MyPluginSettingTab(this.app, this));
    this.registerDomEvent(document, "mouseout", (event) => {
      this.tooltip.style.display = "none";
    });
    this.tooltip = document.createElement("div");
    this.tooltip.setAttribute("id", "my-plugin-tooltip");
    this.tooltip.style.position = "absolute";
    this.tooltip.style.zIndex = "1000";
    this.tooltip.style.display = "none";
    document.body.appendChild(this.tooltip);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
    this.tooltip.remove();
  }
};
var MyPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Date Format").setDesc("Choose your preferred date format").addDropdown(
      (dropdown) => dropdown.addOptions({
        "YYYY-MM-DD": "YYYY-MM-DD",
        "DD-MM-YYYY": "DD-MM-YYYY"
        // Add other formats as options
      }).setValue(this.plugin.settings.selectedDateFormat).onChange(async (value) => {
        this.plugin.settings.selectedDateFormat = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtcbiAgQXBwLFxuICBFZGl0b3IsXG4gIE1hcmtkb3duVmlldyxcbiAgTW9kYWwsXG4gIE5vdGljZSxcbiAgUGx1Z2luLFxuICBQbHVnaW5TZXR0aW5nVGFiLFxuICBTZXR0aW5nLFxufSBmcm9tIFwib2JzaWRpYW5cIjtcblxuLy8gUmVtZW1iZXIgdG8gcmVuYW1lIHRoZXNlIGNsYXNzZXMgYW5kIGludGVyZmFjZXMhXG5cbmludGVyZmFjZSBNeVBsdWdpblNldHRpbmdzIHtcbiAgc2VsZWN0ZWREYXRlRm9ybWF0OiBzdHJpbmc7XG59XG5jb25zdCBEQVRFX0ZPUk1BVFMgPSB7XG4gIFwiWVlZWS1NTS1ERFwiOiAvXFxiXFxkezR9LVxcZHsyfS1cXGR7Mn1cXGIvZyxcbiAgXCJERC1NTS1ZWVlZXCI6IC9cXGJcXGR7Mn0tXFxkezJ9LVxcZHs0fVxcYi9nLFxuICAvLyBBZGQgb3RoZXIgZm9ybWF0cyBhcyBuZWVkZWRcbn07XG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IE15UGx1Z2luU2V0dGluZ3MgPSB7XG4gIHNlbGVjdGVkRGF0ZUZvcm1hdDogXCJZWVlZLU1NLUREXCIsIC8vIERlZmF1bHQgZm9ybWF0XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNeVBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gIHByaXZhdGUgaGFuZGxlSG92ZXIoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCBob3ZlcmVkRWxlbWVudCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudDtcbiAgICBjb25zdCBob3ZlcmVkVGV4dCA9IGhvdmVyZWRFbGVtZW50LnRleHRDb250ZW50IHx8IFwiXCI7XG4gICAgY29uc3Qgc2VsZWN0ZWRSZWdleCA9IERBVEVfRk9STUFUU1t0aGlzLnNldHRpbmdzLnNlbGVjdGVkRGF0ZUZvcm1hdF07XG5cbiAgICAvLyBVc2UgbWF0Y2ggdG8gZmluZCB0aGUgZGF0ZSBpbiB0aGUgdGV4dFxuICAgIGNvbnN0IG1hdGNoID0gaG92ZXJlZFRleHQubWF0Y2goc2VsZWN0ZWRSZWdleCk7XG4gICAgaWYgKG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIFVzZSB0aGUgZmlyc3QgbWF0Y2hlZCBkYXRlXG4gICAgICBjb25zdCBob3ZlcmVkRGF0ZSA9IG5ldyBEYXRlKG1hdGNoWzBdKTtcbiAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgIGNvbnN0IHRpbWVEaWZmZXJlbmNlID0gdG9kYXkuZ2V0VGltZSgpIC0gaG92ZXJlZERhdGUuZ2V0VGltZSgpO1xuICAgICAgY29uc3QgZGF5c1NpbmNlID0gTWF0aC5mbG9vcih0aW1lRGlmZmVyZW5jZSAvICgxMDAwICogMzYwMCAqIDI0KSk7XG5cbiAgICAgIC8vIERpc3BsYXkgdGhlIHJlc3VsdCBpbiB0aGUgdG9vbHRpcFxuICAgICAgdGhpcy50b29sdGlwLnRleHRDb250ZW50ID0gYCR7ZGF5c1NpbmNlfSBkYXlzIHNpbmNlYDtcbiAgICAgIHRoaXMudG9vbHRpcC5zdHlsZS5sZWZ0ID0gYCR7ZXZlbnQuY2xpZW50WH1weGA7XG4gICAgICB0aGlzLnRvb2x0aXAuc3R5bGUudG9wID0gYCR7ZXZlbnQuY2xpZW50WSArIDIwfXB4YDsgLy8gMjAgcGl4ZWxzIGJlbG93IHRoZSBjdXJzb3JcbiAgICAgIHRoaXMudG9vbHRpcC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIG9ubG9hZCgpIHtcbiAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuICAgIGNvbnNvbGUubG9nKFwiU2VsZWN0ZWQgZGF0ZSBmb3JtYXQ6XCIsIHRoaXMuc2V0dGluZ3Muc2VsZWN0ZWREYXRlRm9ybWF0KTtcbiAgICB0aGlzLnJlZ2lzdGVyRG9tRXZlbnQoZG9jdW1lbnQsIFwibW91c2VvdmVyXCIsIChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgdGhpcy5oYW5kbGVIb3ZlcihldmVudCk7XG4gICAgfSk7XG4gICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG4gICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBNeVBsdWdpblNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcblxuICAgIHRoaXMucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgXCJtb3VzZW91dFwiLCAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgIHRoaXMudG9vbHRpcC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgfSk7XG5cbiAgICB0aGlzLnRvb2x0aXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMudG9vbHRpcC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcIm15LXBsdWdpbi10b29sdGlwXCIpO1xuICAgIHRoaXMudG9vbHRpcC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICB0aGlzLnRvb2x0aXAuc3R5bGUuekluZGV4ID0gXCIxMDAwXCI7XG4gICAgdGhpcy50b29sdGlwLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAvLyBBZGQgbW9yZSBzdHlsaW5nIGFzIG5lZWRlZC4uLlxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy50b29sdGlwKTtcbiAgfVxuICBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG4gICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG4gIH1cblxuICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG4gICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcbiAgfVxuXG4gIG9udW5sb2FkKCkge1xuICAgIHRoaXMudG9vbHRpcC5yZW1vdmUoKTtcbiAgfVxufVxuXG5jbGFzcyBTYW1wbGVNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgY29uc3RydWN0b3IoYXBwOiBBcHApIHtcbiAgICBzdXBlcihhcHApO1xuICB9XG5cbiAgb25PcGVuKCkge1xuICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgIGNvbnRlbnRFbC5zZXRUZXh0KFwiV29haCFcIik7XG4gIH1cblxuICBvbkNsb3NlKCkge1xuICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuICB9XG59XG5cbmNsYXNzIE15UGx1Z2luU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuICBwbHVnaW46IE15UGx1Z2luO1xuXG4gIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IE15UGx1Z2luKSB7XG4gICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xuICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICB9XG5cbiAgZGlzcGxheSgpIHtcbiAgICBjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xuXG4gICAgY29udGFpbmVyRWwuZW1wdHkoKTtcblxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgLnNldE5hbWUoXCJEYXRlIEZvcm1hdFwiKVxuICAgICAgLnNldERlc2MoXCJDaG9vc2UgeW91ciBwcmVmZXJyZWQgZGF0ZSBmb3JtYXRcIilcbiAgICAgIC5hZGREcm9wZG93bigoZHJvcGRvd24pID0+XG4gICAgICAgIGRyb3Bkb3duXG4gICAgICAgICAgLmFkZE9wdGlvbnMoe1xuICAgICAgICAgICAgXCJZWVlZLU1NLUREXCI6IFwiWVlZWS1NTS1ERFwiLFxuICAgICAgICAgICAgXCJERC1NTS1ZWVlZXCI6IFwiREQtTU0tWVlZWVwiLFxuICAgICAgICAgICAgLy8gQWRkIG90aGVyIGZvcm1hdHMgYXMgb3B0aW9uc1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNlbGVjdGVkRGF0ZUZvcm1hdClcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZWxlY3RlZERhdGVGb3JtYXQgPSB2YWx1ZTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgIH0pXG4gICAgICApO1xuICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBU087QUFPUCxJQUFNLGVBQWU7QUFBQSxFQUNuQixjQUFjO0FBQUEsRUFDZCxjQUFjO0FBQUE7QUFFaEI7QUFFQSxJQUFNLG1CQUFxQztBQUFBLEVBQ3pDLG9CQUFvQjtBQUFBO0FBQ3RCO0FBRUEsSUFBcUIsV0FBckIsY0FBc0MsdUJBQU87QUFBQSxFQUNuQyxZQUFZLE9BQXlCO0FBQzNDLFVBQU0saUJBQWlCLE1BQU07QUFDN0IsVUFBTSxjQUFjLGVBQWUsZUFBZTtBQUNsRCxVQUFNLGdCQUFnQixhQUFhLEtBQUssU0FBUyxrQkFBa0I7QUFHbkUsVUFBTSxRQUFRLFlBQVksTUFBTSxhQUFhO0FBQzdDLFFBQUksU0FBUyxNQUFNLFNBQVMsR0FBRztBQUU3QixZQUFNLGNBQWMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxDQUFDO0FBQ3JDLFlBQU0sUUFBUSxJQUFJLEtBQUs7QUFDdkIsWUFBTSxpQkFBaUIsTUFBTSxRQUFRLElBQUksWUFBWSxRQUFRO0FBQzdELFlBQU0sWUFBWSxLQUFLLE1BQU0sa0JBQWtCLE1BQU8sT0FBTyxHQUFHO0FBR2hFLFdBQUssUUFBUSxjQUFjLEdBQUc7QUFDOUIsV0FBSyxRQUFRLE1BQU0sT0FBTyxHQUFHLE1BQU07QUFDbkMsV0FBSyxRQUFRLE1BQU0sTUFBTSxHQUFHLE1BQU0sVUFBVTtBQUM1QyxXQUFLLFFBQVEsTUFBTSxVQUFVO0FBQUEsSUFDL0I7QUFBQSxFQUNGO0FBQUEsRUFFQSxNQUFNLFNBQVM7QUFDYixVQUFNLEtBQUssYUFBYTtBQUN4QixZQUFRLElBQUkseUJBQXlCLEtBQUssU0FBUyxrQkFBa0I7QUFDckUsU0FBSyxpQkFBaUIsVUFBVSxhQUFhLENBQUMsVUFBc0I7QUFDbEUsV0FBSyxZQUFZLEtBQUs7QUFBQSxJQUN4QixDQUFDO0FBQ0QsU0FBSyxXQUFXLE9BQU8sT0FBTyxDQUFDLEdBQUcsa0JBQWtCLE1BQU0sS0FBSyxTQUFTLENBQUM7QUFDekUsU0FBSyxjQUFjLElBQUksbUJBQW1CLEtBQUssS0FBSyxJQUFJLENBQUM7QUFFekQsU0FBSyxpQkFBaUIsVUFBVSxZQUFZLENBQUMsVUFBc0I7QUFDakUsV0FBSyxRQUFRLE1BQU0sVUFBVTtBQUFBLElBQy9CLENBQUM7QUFFRCxTQUFLLFVBQVUsU0FBUyxjQUFjLEtBQUs7QUFDM0MsU0FBSyxRQUFRLGFBQWEsTUFBTSxtQkFBbUI7QUFDbkQsU0FBSyxRQUFRLE1BQU0sV0FBVztBQUM5QixTQUFLLFFBQVEsTUFBTSxTQUFTO0FBQzVCLFNBQUssUUFBUSxNQUFNLFVBQVU7QUFFN0IsYUFBUyxLQUFLLFlBQVksS0FBSyxPQUFPO0FBQUEsRUFDeEM7QUFBQSxFQUNBLE1BQU0sZUFBZTtBQUNuQixTQUFLLFdBQVcsT0FBTyxPQUFPLENBQUMsR0FBRyxrQkFBa0IsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUFBLEVBQzNFO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDbkIsVUFBTSxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBQUEsRUFDbkM7QUFBQSxFQUVBLFdBQVc7QUFDVCxTQUFLLFFBQVEsT0FBTztBQUFBLEVBQ3RCO0FBQ0Y7QUFrQkEsSUFBTSxxQkFBTixjQUFpQyxpQ0FBaUI7QUFBQSxFQUdoRCxZQUFZLEtBQVUsUUFBa0I7QUFDdEMsVUFBTSxLQUFLLE1BQU07QUFDakIsU0FBSyxTQUFTO0FBQUEsRUFDaEI7QUFBQSxFQUVBLFVBQVU7QUFDUixVQUFNLEVBQUUsWUFBWSxJQUFJO0FBRXhCLGdCQUFZLE1BQU07QUFFbEIsUUFBSSx3QkFBUSxXQUFXLEVBQ3BCLFFBQVEsYUFBYSxFQUNyQixRQUFRLG1DQUFtQyxFQUMzQztBQUFBLE1BQVksQ0FBQyxhQUNaLFNBQ0csV0FBVztBQUFBLFFBQ1YsY0FBYztBQUFBLFFBQ2QsY0FBYztBQUFBO0FBQUEsTUFFaEIsQ0FBQyxFQUNBLFNBQVMsS0FBSyxPQUFPLFNBQVMsa0JBQWtCLEVBQ2hELFNBQVMsT0FBTyxVQUFVO0FBQ3pCLGFBQUssT0FBTyxTQUFTLHFCQUFxQjtBQUMxQyxjQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsTUFDakMsQ0FBQztBQUFBLElBQ0w7QUFBQSxFQUNKO0FBQ0Y7IiwKICAibmFtZXMiOiBbXQp9Cg==
